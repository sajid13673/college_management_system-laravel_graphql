extend type Query{
    Students: [Student!] @paginate @canAccess(requiredRole: ["admin", "teacher"])
    Student(id: ID @eq): Student @find @canAccess(requiredRole: ["admin"])
}

type Student{
    id: ID
    name: String
    email: String
    address: String
    phone_number: String
    date_of_birth: String
    classrooms: [Classroom!] @belongsToMany
    user: User @belongsTo
}

extend type Mutation{
    createStudent( input: CreateStudentInput @spread ): Student! @create @canAccess(requiredRole: ["admin"])
    updateStudent( input: UpdateStudentInput @spread): Student! @update @canAccess(requiredRole: ["admin"])
    deleteStudent(id: ID! @whereKey): Student @delete @canAccess(requiredRole: ["admin"])
}

input CreateStudentInput {
    name: String! @rules(apply: ["required"])
    phone_number: String! @rules(apply: ["required", "numeric", "digits_between:10,13", "unique:students,phone_number"])
    address: String! @rules(apply: ["required"])
    date_of_birth: String @rules(apply: ["required", "date"])
    classrooms: CreateClassroomBelongsToMany 
    user: CreateUserBelongsTo 
}

input CreateUserBelongsTo {
    create: CreateUserInput
}

input CreateUserInput {
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @hash @rules(apply: ["required", "min:8"])
    role: String
}

input UpdateStudentInput @validator {
    id: ID!
    name: String
    address: String
    phone_number: String
    date_of_birth: String
    classrooms: CreateClassroomBelongsToMany 
}

input CreateClassroomBelongsToMany {
    create: [CreateClassroomInput!]
    connect: [ID!]
    sync: [ID!]
}
