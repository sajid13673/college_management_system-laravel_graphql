extend type Query{
    classrooms: [Classroom!] @paginate @canAccess(requiredRole: ["admin"]) 
    classroom(id: ID @eq): Classroom @find @guard
    allClassrooms: [Classroom!] @canAccess(requiredRole: ["admin"])
}

type Classroom{
    id: ID
    name: String
    year: String
    students: [Student!]! @belongsToMany 
    teachers: [Teacher] @belongsToMany
    classMaterials: [ClassMaterial] @hasMany
    classNotes: [ClassNote] @hasMany
}

extend type Mutation{
    createClassroom( input: CreateClassroomInput @spread): Classroom @create @canAccess(requiredRole: ["admin"])
    updateClassroom( input: UpdateClassroomInput @spread): Classroom! @update @canAccess(requiredRole: ["admin"])
    deleteClassroom(id: ID! @whereKey): Classroom @delete @canAccess(requiredRole: ["admin"])
}
input CreateClassroomInput {
    name: String! @rules(apply: ["required", "unique:classrooms,name"])
    year: String! @rules(apply: ["required", "numeric", "digits:4"])
}
input UpdateClassroomInput @validator{
    id: ID!  
    name: String
    year: String  
}