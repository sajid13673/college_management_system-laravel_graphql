extend type Query{
    Teachers: [Teacher!] @paginate @canAccess(requiredRole: ["admin"])
    Teacher(id: ID @eq): Teacher @find @canAccess(requiredRole: ["admin"])
}

type Teacher{
    id: ID
    name: String
    email: String
    address: String
    phone_number: String
    user: User @belongsTo
    classrooms: [Classroom!] @belongsToMany
}

extend type Mutation{
    createTeacher(input: CreateTeacherInput @spread): Teacher! @create @canAccess(requiredRole: ["admin"])
    updateTeacher(input: UpdateTeacherInput @spread): Teacher! @update @canAccess(requiredRole: ["admin"])
    deleteTeacher(input: DeleteTeacherInput @spread): Teacher @canAccess(requiredRole: ["admin"])
}

input CreateTeacherInput {
    name: String! @rules(apply: ["required"])
    phone_number: String! @rules(apply: ["required", "numeric", "digits_between:10,13", "unique:teachers,phone_number"])
    address: String! @rules(apply: ["required"])
    user: CreateUserBelongsTo
    classrooms: CreateClassroomBelongsToMany
}

input UpdateTeacherInput @validator{
    id: ID!
    name: String!
    phone_number: String! 
    address: String!
    classrooms: CreateClassroomBelongsToMany
}